#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

begin
  require 'lolcommits'
rescue LoadError
  require 'rubygems'
  require 'lolcommits'
end

include Lolcommits
require 'launchy'
require 'choice'

require 'methadone'
include Methadone::CLILogging

#
# CHECK FOR FURTHER DEPENDENCIES
#

def die_on_fatal_conditions!
  if Configuration.platform_mac?
    %w(imagesnap videosnap).each do |executable|
      unless File.executable? File.join(Configuration::LOLCOMMITS_ROOT, 'vendor', 'ext', executable, executable)
        fatal "Couldn't properly execute #{executable} for some reason, please file a bug?!"
        exit 1
      end
    end
  elsif Configuration.platform_linux?
    if not Configuration.command_which('mplayer')
      fatal "Couldn't find mplayer in your PATH!"
      exit 1
    end
  end
  unless File.readable? File.join(Configuration::LOLCOMMITS_ROOT, 'vendor', 'fonts', 'Impact.ttf')
    fatal "Couldn't properly read Impact font from gem package, please file a bug?!"
    exit 1
  end
  if !Configuration.valid_ffmpeg_installed? && capture_animate
    fatal 'FATAL: ffmpeg does not appear to be properly installed!'
    exit 1
  end
  unless Configuration.valid_imagemagick_installed?
    fatal 'FATAL: ImageMagick does not appear to be properly installed!'
    exit 1
  end
  if Configuration.git_config_color_always?
    fatal "Due to a bug in the ruby-git library, git config for color.ui cannot be set to 'always'."
    fatal "Try setting it to 'auto' instead!"
    exit 1
  end
end

def die_if_not_git_repo!
  begin
    debug 'Checking for valid git repo'
    g = Git.open('.')
  rescue ArgumentError
    # ruby-git throws an argument error if path isnt for a valid git repo...
    fatal "Erm? Can't do that since we're not in a valid git repository!"
    exit 1
  end
end

#
# NO ARGUMENTS SPECIFIED, HELP THE USER OUT
#
def do_noargs
  # TODO: make this a contextual helper to know status of whether lolcommits is enabled
  puts 'Do what exactly?'
  puts 'Try: lolcommits --enable   (when in a git repository)'
  puts 'Or:  lolcommits --help'
end

def configuration
  if Choice.choices[:test]
    Configuration.new(:loldir => Configuration.loldir_for('test'))
  else
    Configuration.new
  end
end

def capture_animate
  if Configuration.can_animate?
    Choice.choices[:animate] || ENV['LOLCOMMITS_ANIMATE'] || nil
  end
end

#
# IF --CAPTURE, DO CAPTURE
#
def do_capture
  capture_delay   = Choice.choices[:delay]    || ENV['LOLCOMMITS_DELAY']    || 0
  capture_stealth = Choice.choices[:stealth]  || ENV['LOLCOMMITS_STEALTH']  || nil
  capture_device  = Choice.choices[:device]   || ENV['LOLCOMMITS_DEVICE']   || nil
  capture_font    = Choice.choices[:font]     || ENV['LOLCOMMITS_FONT']     || nil
  capture_text    = !(Choice.choices[:no_text] || ENV['LOLCOMMITS_NOTEXT']) && true

  capture_options = {
    :capture_delay   => capture_delay,
    :capture_stealth => capture_stealth,
    :capture_device  => capture_device,
    :font            => capture_font,
    :capture_animate => capture_animate,
    :config          => configuration,
    :capture_text    => capture_text
  }

  fork_me? do
    if Choice.choices[:test]
      info '*** Capturing in test mode.'

      # get optional fake commit msg and sha from command line
      override_text = {
        :message => Choice.choices[:msg],
        :sha     => Choice.choices[:sha]
      }

      runner = Lolcommits::Runner.new(capture_options.merge override_text)
      runner.run

      # automatically open so the user can see the test image results immediately
      Launchy.open(runner.main_image)
    else
      runner = Lolcommits::Runner.new(capture_options)
      runner.run
    end
  end
end

def fork_me?(&block)
  if Choice.choices[:fork] || ENV['LOLCOMMITS_FORK']
    $stdout.sync = true
    write_pid fork {
      yield block
      delete_pid
    }
  else
    yield block
  end
end

def write_pid(pid)
  File.open(pid_file, 'w') { |f| f.write(pid) }
end

def delete_pid
  File.delete(pid_file) if File.exist?(pid_file)
end

def pid_file
  File.join(configuration.loldir, 'lolcommits.pid')
end

def do_configure
  configuration.do_configure! Choice.choices[:plugin]
end

def do_last
  die_if_not_git_repo!
  lolimage = configuration.most_recent
  if lolimage.nil?
    warn 'No lolcommits have been captured for this repository yet.'
    exit 1
  end
  Launchy.open lolimage
end

def do_gif
  die_if_not_git_repo!

  case Choice.choices[:gif]
    when 'today'
      lolimages = configuration.jpg_images_today
      filename  = "#{Date.today.to_s}.gif"
    else
      lolimages = configuration.jpg_images
      filename  = 'archive.gif'
  end

  if lolimages.empty?
    warn 'No lolcommits have been captured for this time yet.'
    exit 1
  end

  puts '*** Generating animated gif.'

  gif = MiniMagick::Image.new File.join configuration.archivedir, filename

  # This is for ruby 1.8.7, *lolimages just doesn't work with ruby 187
  gif.run_command('convert', *['-delay', '50', '-loop', '0', lolimages, "#{gif.path}"].flatten)

  puts "*** #{gif.path} generated."
end

def print_version_and_exit
  puts Lolcommits::VERSION
  exit 0
end

def change_dir_to_root_or_repo!
  debug 'Walking up dir tree'
  loop do
    cur = File.expand_path('.')
    nxt = File.expand_path('..', cur)
    if File.directory?(File.expand_path('.git')) || nxt == cur
      return # found root or git dir
    end
    Dir.chdir(nxt)
  end
end

#
# Command line parsing fun
#
Choice.options do

  option :version do
    long '--version'
    short '-v'
    desc 'print version and exit'
    action { print_version_and_exit }
  end

  option :enable do
    long '--enable'
    short '-e'
    action { Installation.do_enable }
    desc 'install lolcommits for this repo'
  end

  option :disable do
    long '--disable'
    short '-d'
    action { Installation.do_disable }
    desc 'uninstall lolcommits for this repo'
  end

  option :capture do
    long '--capture'
    short '-c'
    desc 'capture lolcommit based on last git commit'
  end

  option :last do
    long '--last'
    short '-l'
    desc 'view the most recent lolcommit'
  end

  option :browse do
    long '--browse'
    short '-b'
    desc "browse this repo's lolcommits"
  end

  option :configure do
    long '--config'
    desc 'configure a plugin'
  end

  option :show_config do
    short '-sc'
    long  '--show-config'
    desc 'display configuration file'
  end

  option :plugin do
    desc 'pass plugin name for --config'
    long '--plugin'
    short '-p'
    default nil
  end

  option :plugins do
    desc 'list all available plugins'
    long '--plugins'
  end

  option :test do
    long '--test'
    desc 'Run in test mode'
  end

  option :sha do
    desc 'pass SHA manually [TEST-MODE]'
    long '--sha'
    short '-s'
    default "test-#{rand(10**10)}"
  end

  option :msg do
    desc 'pass commit msg manually [TEST-MODE]'
    long '--msg'
    short '-m'
    default 'this is a test message i didnt really commit something'
  end

  option :delay do
    long '--delay=SECONDS'
    desc 'delay taking of the snapshot by n seconds'
    cast Integer
    short '-w'
  end

  option :stealth do
    long '--stealth'
    desc 'capture image in stealth mode'
  end

  option :no_text do
    long '--no-text'
    desc 'capture image without information text'
  end

  option :device do
    long '--device=DEVICE'
    desc 'the device name used to take the snapshot (mac/linux only)'
  end

  option :devices do
    long '--devices'
    desc 'list all video devices available (mac only)'
  end

  option :debug do
    long '--debug'
    desc 'output debugging information'
  end

  option :font do
    long '--font=FONT_PATH'
    short '-f'
    desc 'pass font file location'
  end

  option :gif do
    long '--gif'
    short '-g'
    desc 'generate animated timeline gif from captured images'
  end

  if Configuration.can_animate?
    option :animate do
      long '--animate=SECONDS'
      short '-a'
      cast Integer
      desc 'enable animated gif captures with duration (seconds)'
    end
  end

  option :fork do
    long '--fork'
    desc 'fork the lolcommits runner to the background'
  end
end

# Set debug level if needed
debug_mode = Choice.choices[:debug] || ENV['LOLCOMMITS_DEBUG'] || nil
if debug_mode
  logger.level = Logger::DEBUG
  debug 'Outputting at DEBUG verbosity'
end

#
# check for fatal conditions before execution
#
die_on_fatal_conditions!

#
# change working dir to either a repo or the fs root
#
change_dir_to_root_or_repo!

#
# Handle actions manually since choice seems weird
#
if not (Choice.choices[:enable] || Choice.choices[:disable])
  if Choice.choices[:capture]
    do_capture
  elsif Choice.choices[:configure]
    do_configure
  elsif Choice.choices[:show_config]
    puts configuration
  elsif Choice.choices[:plugins]
    configuration.puts_plugins
  elsif Choice.choices[:devices]
    configuration.puts_devices
  elsif Choice.choices[:last]
    do_last
  elsif Choice.choices[:browse]
    die_if_not_git_repo!
    Launchy.open configuration.loldir
  elsif Choice.choices[:gif]
    do_gif
  else
    do_noargs
  end
end
