#!/usr/bin/env ruby

begin
  require 'lolcommits'
rescue LoadError
  require 'rubygems'
  require 'lolcommits'
end

include Lolcommits

#
# CHECK FOR FURTHER DEPENDENCIES
#

# which replacement http://stackoverflow.com/q/2108727
def command?(name)
  `which #{name}`
  $?.success?
end

if is_mac?
  if not command?('imagesnap')
    puts "Couldn't find imagesnap in your PATH!"
    puts "Easiest way to get it is to install homebrew and do `brew install imagesnap`"
    exit 1
  end
elsif is_linux?
  if not command?('mplayer')
    puts "Couldn't find mplayer in your PATH!"
    exit 1
  end
end

#
# NO ARGUMENTS SPECIFIED, HELP THE USER OUT
#
def do_noargs
  #TODO: make this a contextual helper to know status of whether lolcommits is enabled
  puts "Do what exactly?"
  puts "Try: lolcommits --enable   (when in a git repository)"
end

HOOK_PATH = ".git/hooks/post-commit"

#
# IF --ENABLE, DO ENABLE
#
def do_enable
  if not File.directory? ".git/hooks"
    puts "You don't appear to be in the base directory of a git project."
    exit 1
  end
  if File.exists? HOOK_PATH
    puts "A post-commit hook already exists for this project."
    #TODO: disambiguate between OUR post-commit hook and something else
    exit 1
  end

  doc = "#!/bin/sh\nlolcommits --capture\n"
  File.open(HOOK_PATH, 'w') {|f| f.write(doc) }
  FileUtils.chmod 0755, HOOK_PATH
  puts "installed lolcommmit hook as:"
  puts "  -> #{File.expand_path(HOOK_PATH)}"
  puts "(to remove later, you can use: lolcommits --disable)"
  # we dont symlink, but rather install a small stub that calls the one from path
  # that way, as gem version changes, script updates even if new file thus breaking symlink
end

#
# IF --DISABLE, DO DISABLE
#
def do_disable
  if File.exists? HOOK_PATH
    #TODO: check if hook file has been modified before removing
    FileUtils.rm HOOK_PATH
    puts "removed #{HOOK_PATH}"
  else
    puts "lolcommits is not enabled for this directory, so there is nothing to uninstall."
  end
end

#
# IF --CAPTURE, DO CAPTURE
#
def do_capture
  capture_delay = Choice.choices[:delay] || ENV['LOLCOMMITS_DELAY'] || 0

  if Choice.choices[:test]
    puts "*** capturing in test mode"
    Lolcommits.capture(capture_delay, true, Choice.choices[:msg], Choice.choices[:sha])
  else
    Lolcommits.capture(capture_delay)
  end
end

#
# Command line parsing fun
#
Choice.options do

  option :enable do
    long "--enable"
    action { do_enable }
    desc "install lolcommits for this repo"
  end

  option :disable do
    long "--disable"
    action { do_disable }
    desc "uninstall lolcommits for this repo"
  end

  option :capture do
    long "--capture"
    desc "capture lolcommit based on last git commit"
  end

  option :last do
    long "--last"
    desc "view the most recent lolcommit"
    action do
      system "open #{Lolcommits.most_recent}"
    end
  end

  option :test do
    long "--test"
    desc "Run in test mode"
  end

  option :sha do
    desc "pass SHA manually (for test only)"
    short '-s'
    default "test-#{rand(10 ** 10)}"
  end

  option :msg do
    desc "pass commit msg manually (for test only)"
    short '-m'
    default "this is a test message i didnt really commit something"
  end

  option :delay do
    long "--delay=SECONDS"
    desc "delay taking of the snapshot by n seconds"
    cast Integer
    short '-d'
    #default 0
  end
end

#
# Handle actions manually since choice seems weird
#
if not (Choice.choices[:enable] || Choice.choices[:disable] || Choice.choices[:last])
  if Choice.choices[:capture]
    do_capture()
  else
    do_noargs()
  end
end

